import{_ as n,C as e,c as t,o as l,j as i,G as p,aj as h,a as k}from"./chunks/framework.DXOjwy1i.js";const F=JSON.parse('{"title":"GNU对ISO C的扩展","description":"","frontmatter":{},"headers":[],"relativePath":"C/GNUCExtension.md","filePath":"C/GNUCExtension.md","lastUpdated":1735035050000}'),r={name:"C/GNUCExtension.md"};function d(c,s,o,C,E,_){const a=e("ArticleMetadata");return l(),t("div",null,[s[0]||(s[0]=i("h1",{id:"gnu对iso-c的扩展",tabindex:"-1"},[k("GNU 对 ISO C 的扩展 "),i("a",{class:"header-anchor",href:"#gnu对iso-c的扩展","aria-label":'Permalink to "GNU对ISO C的扩展"'},"​")],-1)),p(a),s[1]||(s[1]=h(`<blockquote><p><a href="https://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html" target="_blank" rel="noreferrer">C Extensions (Using the GNU Compiler Collection (GCC))</a></p></blockquote><p>GNU 的 GCC 编译器对 ISO C 语言做了很多扩展，这使得 C 语言能完成更多复杂的功能。比如半精度浮点数、嵌套函数定义、128 位超大整数等等标准 C 里没有的功能，非常 NB。这里只说一些我见过或者用过的一些语法。</p><p>GNU 扩展支持 GCC, Clang/LLVM 编译器，Visual Studio 默认的 MSVC 并不支持。如果你的 C 代码需要在 MSVC, GCC, Clang 等多个编译器下编译，那么需要做好兼容性处理。</p><p>怎么做兼容性处理呢？当然就是按照不同的编译器去编译不同的代码。那么怎么判断编译器呢？答案是条件编译。</p><p>在标准 C 中，会定义 <code>__STDC__</code> 与 <code>__STDC_VERSION__</code> 宏，我们可以通过这两个宏判断 C 标准：</p><table tabindex="0"><thead><tr><th>标准</th><th>宏</th></tr></thead><tbody><tr><td>C89/90</td><td><code>__STDC__</code></td></tr><tr><td>C99</td><td><code>__STDC_VERSION__ = 199901L</code></td></tr><tr><td>C11</td><td><code>__STDC_VERSION__ = 201112L</code></td></tr></tbody></table><p>同样的，不同的编译器会自己定义一些特有的宏，比如 GCC 的 <code>__GNUC__</code> ，clang 的 <code>__clang__</code> 等等。下面的代码可以简单判断当前的编译器，通过这种方式可以避免一些编译问题：</p><div class="language-C vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> defined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__GNUC__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GCC Compiler</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   /* __GNUC__ */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> defined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_MSC_VER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MSVC Compiler</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   /* _MSC_VER */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> defined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__clang__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Clang Compiler</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   /* __clang__ */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>`,8))])}const y=n(r,[["render",d]]);export{F as __pageData,y as default};
