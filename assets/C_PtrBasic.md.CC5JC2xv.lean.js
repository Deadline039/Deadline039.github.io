import{_ as n,c as e,j as i,a as p,G as t,a6 as l,B as h,o as r}from"./chunks/framework.DJnWV1b9.js";const k="/C/ptrBasic_1.png",d="/C/ptrBasic_2.png",c="/C/ptrBasic_3.png",o="/C/ptrBasic_4.png",B=JSON.parse('{"title":"地址与内存","description":"","frontmatter":{},"headers":[],"relativePath":"C/PtrBasic.md","filePath":"C/PtrBasic.md","lastUpdated":1734863078000}'),g={name:"C/PtrBasic.md"};function b(u,s,E,F,m,y){const a=h("ArticleMetadata");return r(),e("div",null,[s[0]||(s[0]=i("h1",{id:"地址与内存",tabindex:"-1"},[p("地址与内存 "),i("a",{class:"header-anchor",href:"#地址与内存","aria-label":'Permalink to "地址与内存"'},"​")],-1)),t(a),s[1]||(s[1]=l(`<blockquote><p>C 大师 154-163</p></blockquote><p>在变量的开篇我提到了，变量就是一片内存。内存里的东西就是变量的值。既然是内存，那么就需要编号来记录内存的位置。就像一栋楼一样，楼里的每个房间都会有它<strong>唯一的</strong>编号，这样快递员就可以按照地址找到房间，然后把快递送到我们手上。假如房间编号不是唯一的，或者一个编号对应多个房间，那么快递员找房间就会非常麻烦，甚至找不到。</p><p>对于计算机也是一样，如果我们想要操作某一块内存，那么就需要知道它的地址，而且要保证地址是唯一的。</p><h2 id="取地址" tabindex="-1">取地址 <a class="header-anchor" href="#取地址" aria-label="Permalink to &quot;取地址&quot;">​</a></h2><blockquote><p>C 大师 155</p></blockquote><p>前面提到，变量就是一片内存区域，或者可以比喻成房间，那么我们怎么获取到这个房间的编号呢？答案就是使用取地址运算符：</p><div class="language-C vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Address of number: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%p\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">number);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>GCC9.4.0 32 位机编译，运行结果：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Address</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> number:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0xbed1c500</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这里打印了 <code>number</code> 变量的地址，32 位机上的变量地址大小是 4 字节，所以这里输出了一个 32 位的整数。我们用 <code>&amp;</code> 运算符可以获取到一个变量的地址。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>%p</code> 是用来输出地址的格式控制符。</p></div><h2 id="指针变量" tabindex="-1">指针变量 <a class="header-anchor" href="#指针变量" aria-label="Permalink to &quot;指针变量&quot;">​</a></h2><blockquote><p>C 大师 156-158</p></blockquote><p>我们获得了一个变量的地址，还需要解决如何存储的问题。如果不存下来，每次操作都需要取一次变量的地址，就会显得特别麻烦。而存储地址的数据类型我们就叫做指针，也就是说，指针变量存储的就是地址。指针存储的是变量的地址，指针变量就像一个箭头，它指向的就是一块内存区域，我们随时可以通过指针所存储的地址去访问到我们要操作的内存。</p><p>我们知道，变量是有类型的。那取地址得到的数据类型是什么呢？就是它变量类型对应的指针类型。也就是说，所有数据类型都会有它的指针类型。怎么声明它所对应的指针类型变量？很简单，变量名前加一个星号（ <code>*</code> ），代表这个变量是这种类型的指针变量。例如，声明一个指针变量，并获取另一个变量的地址，并把它打印出来：</p><div class="language-C vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">number;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Address of number : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%p\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ptr);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>GCC9.4.0 32 位机编译，运行结果：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Address</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> number:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0xbe9144fc</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这里先声明了一个 <code>int</code> 型的变量 <code>number</code> ，还声明了一个 <code>int*</code> 型的指针变量 <code>ptr</code> ，然后把 <code>number</code> 的地址赋给 <code>ptr</code> ，并把它打印出来，可以看到， <code>number</code> 的地址是 <code>0xbe9144fc</code> 。</p><p>不知道你有没有注意到，这里的 <code>printf</code> 输出 <code>ptr</code> 的值的时候我们没有加 <code>&amp;</code> 取地址符，而上一节用 <code>printf</code> 输出 <code>number</code> 的地址的时候加了取地址符，也就是 <code>&amp;number</code> ，那输出 <code>ptr</code> 的时候为什么不加呢？</p><p><code>ptr</code> 已经是一个指针变量了，也就是说它存储的内容本身就是一个地址，我们要输出 <code>ptr</code> 的内容， <code>ptr</code> 本身就是一个变量，如果再加一个取地址符号 <code>&amp;ptr</code> ，它代表的是 <code>ptr</code> 变量的地址。<em>这里我们要输出的是 <code>ptr</code> 的内容，而不是 <code>ptr</code> 的地址。</em></p><p>单纯得到这一个地址可能没有多大的用处，稍后我们会详细讲解它的强大。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>有些代码风格会把星号放在类型一边，也就是 <code>int* ptr</code> ，但是我不推荐这样做。你可能想问，这与 <code>int *ptr</code> 有什么区别呢？先别着急，看看这行代码的两个变量分别是什么类型：</p><div class="language-C vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ptr1, ptr2;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>ptr1</code> 与 <code>ptr2</code> 都是 <code>int</code> 指针变量？错误， <code>ptr1</code> 是 <code>int*</code> 型的指针变量，但是 <code>ptr2</code> 是 <strong><code>int</code> 型的变量，它不是指针！</strong></p><p>所以我们要求把星号放在变量一侧，也就是 <code>int *ptr1, ptr2</code> ， <strong>强调 <code>ptr1</code> 是一个指针</strong>；而 <code>int* ptr1, ptr2</code> 的写法更像是强调这两个变量是 <code>int*</code> 类型的变量，也就是指针类型。</p></div><p>知道了一个变量的地址，怎么获取地址所存储的内容呢？答案是使用取内容运算符 <code>*</code> ：</p><div class="language-C vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">number;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;number is </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, ptr content: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, number, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ptr);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;number is </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, ptr content: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, number, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ptr);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>GCC9.4.0 32 位机编译，运行结果：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">number</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 10,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ptr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> content:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">number</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 20,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ptr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> content:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这里我将 <code>number</code> 变量的地址赋给了 <code>ptr</code> ，然后通过 <code>printf</code> 输出 <code>ptr</code> 的内容。可以看到， <code>*ptr</code> 输出的内容与 <code>number</code> 一致。后面我通过 <code>ptr</code> 指针把 <code>ptr</code> 所指向的内容修改为了 20，同样的我们可以看到 <code>number</code> 的值也被修改为了 20。也就是说， <code>*</code> 不仅可以用来访问变量，而且也可以用来修改地址所对应变量的内容。</p><p><code>&amp;</code> 与 <code>*</code> 是一对互逆的运算， <code>&amp;</code> 是取地址， <code>*</code> 是取地址里的内容。</p><h2 id="指针有什么用" tabindex="-1">指针有什么用？ <a class="header-anchor" href="#指针有什么用" aria-label="Permalink to &quot;指针有什么用？&quot;">​</a></h2><blockquote><p>C 大师 159</p></blockquote><p>讲了一大堆，那你可能会问，这指针究竟有什么用呢？这里 Frank 举了一个例子：快捷方式。</p><p>大家在 Windows 上安装软件，或多或少都会见到过说是否要在桌面、开始菜单等地方创建快捷方式吧，就像下面这样：</p><figure><img src="`+k+'" alt="" loading="lazy"><figcaption>安装时询问是否创建快捷方式</figcaption></figure><p>为什么要有快捷方式呢？废话，快捷方式的意思就是让你用<strong>快捷、方便</strong>的方式去打开它。这里我们随便找一个快捷方式打开属性看一下：</p><figure><img src="'+d+'" alt="" loading="lazy"><figcaption>快捷方式属性</figcaption></figure><p>你说快捷方式左下角的箭头是什么意思？是不是指针的意思？它是不是指向一个程序？快捷方式就像一种指针，它指向的目标是一个文件：</p><blockquote><p>文件路径的意义就是文件的地址，所以快捷方式存储的就是文件的地址。这跟我们前面将的指针像不像？</p></blockquote><figure><img src="'+c+'" alt="" loading="lazy"><figcaption>实际指向的文件</figcaption></figure><p>如果让你打开一个程序，需要从这么长的路径里去找，那你估计会疯掉。Windows 的开发人员显然也意识到了这个问题，因此他们设计了快捷方式这么一个东西。</p><blockquote><p>当然快捷方式不止指向文件，还可以指向文件夹、网站等。不过大多数快捷方式还是指向文件。</p></blockquote><p>不知道有多少人小时候去网吧偷偷拷游戏，拷了桌面的一大堆快捷方式，然后到自己家的电脑上发现一个都打不开，这是因为快捷方式它只是指向文件，当目标文件丢失了自然也就打不开：</p><figure><img src="'+o+'" alt="" loading="lazy"><figcaption>快捷方式目标丢失</figcaption></figure><p>翻译：快捷方式所<strong>指向</strong>的项目 <code>ffmpeg.exe</code> 已经被删除，但是可以从回收站里恢复。你要恢复这个文件，还是删除这个快捷方式？</p><p>仔细理解一下，然后再开始下面的内容。</p>',45))])}const v=n(g,[["render",b]]);export{B as __pageData,v as default};
