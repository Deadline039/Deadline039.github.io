import{_ as n,C as t,c as e,o as l,j as i,G as p,aj as h,a as k}from"./chunks/framework.DXOjwy1i.js";const r="/Embedded/ram-rom-layout.png",d="/Embedded/f1-sct-view.svg",m=JSON.parse('{"title":"armlink与分散加载文件","description":"","frontmatter":{},"headers":[],"relativePath":"Embedded/scatter.md","filePath":"Embedded/scatter.md","lastUpdated":1752245283000}'),F={name:"Embedded/scatter.md"};function g(c,s,o,E,y,C){const a=t("ArticleMetadata");return l(),e("div",null,[s[0]||(s[0]=i("h1",{id:"armlink与分散加载文件",tabindex:"-1"},[k("armlink 与分散加载文件 "),i("a",{class:"header-anchor",href:"#armlink与分散加载文件","aria-label":'Permalink to "armlink与分散加载文件"'},"​")],-1)),p(a),s[1]||(s[1]=h('<blockquote><p><a href="https://developer.arm.com/documentation/dui0474/f/using-scatter-files" target="_blank" rel="noreferrer">ARM Compiler armlink User Guide Version 5.06 - Scatter-loading Features</a></p><p><a href="https://developer.arm.com/documentation/dui0474/m/scatter-file-syntax?lang=en" target="_blank" rel="noreferrer">ARM Compiler armlink User Guide Version 5.06 - Scatter File Syntax</a></p><p><a href="https://hadongzhu.com/archives/260" target="_blank" rel="noreferrer">Keil MDK（ARM 编译器）分散加载特性（下）：使用分散加载文件（.sct）控制 – 哈冬猪的小站 – 个人学习记录</a></p></blockquote><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>AC6 的 armlink 移植自 AC5，所以下面的内容 AC5/AC6 通用</p></div><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>分散加载文件（scatter-loader file，文件后缀为 sct）是 ARM Compiler (AC5/AC6) 所需要的链接控制文件。简单来说，这个文件描述了 RAM/ROM 的地址与大小，变量、代码放哪里，怎么放，这些事是链接器来干的。</p><p>简单的内存布局不需要手动编写 sct 文件，使用 MDK, EIDE 自带的 RAM/ROM Layout 足矣。只需要设置起始地址与大小（偏移量）就可以了。</p><figure><img src="'+r+`" alt="" loading="lazy"><figcaption> STM32F103RC 的 RAM/ROM 布局</figcaption></figure><p>其实，在 MDK, EIDE 等 IDE 编译之前，会自动根据这个 GUI 里的设置生成一个 sct 文件供 armlink 使用，仔细观察编译目录就会发现 sct 文件。上面 STM32F103RC 的 RAM/ROM Layout 设置，EIDE 生成的 sct 文件如下：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>; ******************************************************************</span></span>
<span class="line"><span>; *** Scatter-Loading Description File generated by Embedded IDE ***</span></span>
<span class="line"><span>; ******************************************************************</span></span>
<span class="line"><span></span></span>
<span class="line"><span>LR_IROM1 0x08000000 0x00040000 {</span></span>
<span class="line"><span>	ER_IROM1 0x08000000 0x00040000 {</span></span>
<span class="line"><span>		*.o (RESET, +First) </span></span>
<span class="line"><span>		*(InRoot$$Sections) </span></span>
<span class="line"><span>		.ANY (+RO) </span></span>
<span class="line"><span>		.ANY (+XO) </span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>	RW_IRAM1 0x20000000 0x0000C000 {</span></span>
<span class="line"><span>		.ANY (+RW +ZI)</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>但是，如果遇到一些复杂内存布局的 MCU，或者需要用到外部 ROM/RAM 的程序，需要管理多块内存的时候，仅仅使用此 GUI 就显得捉襟见肘了。什么时候建议使用分散加载文件呢？下面是 ARM 官方的建议：</p><blockquote><p><a href="https://developer.arm.com/documentation/dui0474/m/scatter-loading-features/the-scatter-loading-mechanism/when-to-use-scatter-loading?lang=en" target="_blank" rel="noreferrer">ARM Compiler armlink User Guide Version 5.06 - When to use scatter-loading</a></p></blockquote><ul><li>复杂的存储布局：代码和数据必须明确指定存储区域</li><li>多种存储类型：例如一个系统包含多种存储设备，如内部 Flash、内部 SRAM、高速 SRAM、外部 SDRAM、外部 ROM 等。这时候就需要 sct 文件去描述这些存储区域</li><li>地址映射的外设：例如 FMC、QSPI 等外设。通常扩展的 SDRAM 需要用到 FMC，sct 文件可以描述这些存储区域，并且可以很方便地访问</li><li>固定常量内容位置：如果一些代码内容不会变化，且在一个固定的地址，不需要重新擦写（Flash 擦写也是有寿命的）即使周围的程序已经修改后重新编译，这部分固定位置的代码不会受影响。这对一些 GUI 程序非常有用，图片、字库这类资源通常非常大，但是又不会经常修改，每次改代码重新编译不仅下载费时间，芯片频繁擦写还会导致 Flash 寿命变短</li><li>指定堆栈位置：默认情况下，堆栈由链接器自动分配。可以手动指定堆栈的分配区域</li></ul><p>以下应用场景我建议手动编写分散加载文件：</p><ul><li>内存布局较为复杂，需要手动指定存储区域，例如 STM32H7</li><li>应用程序需要用到 Bootloader，一部分 ROM 存储 Bootloader 代码；另一部分 ROM 存储应用代码</li><li>需要用到外部 Flash 外扩 ROM 空间，例如使用 QSPI Flash 存储数据或者代码</li></ul><h2 id="加载域与运行域" tabindex="-1">加载域与运行域 <a class="header-anchor" href="#加载域与运行域" aria-label="Permalink to &quot;加载域与运行域&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>这里以及后面所说的变量都指的是静态变量，函数的局部变量、malloc 分配的动态内存都不属于此部分变量。</p></div><p>简单来说，一个程序要运行，需要 ROM 存储代码，运行时需要将数据从 ROM 加载到 RAM 来执行。那么，ROM 就可以理解为加载域，负责将数据和指令<strong>加载</strong>到 RAM 中执行；RAM 就可以理解为执行域，负责存储数据执行代码。下图是一个简单的内存布局图：</p><figure><img src="`+d+`" alt="" loading="lazy"><figcaption> STM32F103RC 内存布局</figcaption></figure><p>左侧是加载域视图；右侧是运行域视图。加载域中包含 RO Section 和 RW Section，存储在 ROM 中；在上电后，先将加载域 RW Section 的数据复制或者解压到运行域 SRAM 中的 RW Section 中，SRAM 中的 ZI Section 进行零填充，RO Section 仍然在 ROM 区域，等待 CPU 调用。一个加载域可以包含多个运行域。</p><p>在 C 程序中，程序段可以分为 .bbs, .text 段等（<a href="/C/PtrMemory#内存布局">内存布局</a>），在 armlink 中定义的数据类型以及他们对应的程序段如下：</p><ul><li>Code: 代码数据，对应 .text，也就是代码段，通常存储在 ROM 中</li><li>RO (Read Only) Data: 只读数据，对应 .rodata 段，通常存储在 ROM 中，const 修饰的静态变量</li><li>RW (Read and Write) Data: 可读写数据，对应 .data 段，存储在 RAM 中，<em>赋初始值的</em>静态变量</li><li>ZI (Zero Initialized) Data: 初始零数据，对应 .bss 段，存储在 RAM 中，静态变量区，与 RW 的区别在于 ZI 没有赋初始值，默认为 0</li></ul><p>RW 的初始值需要存储在 ROM 中，上电需要加载到 RAM 中，给变量赋初值。所以镜像大小等于 Code + RO Data + RW Data。这就是 ARM Compiler 每次编译完成输出的信息：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 编译工程 1 输出信息：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Program</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Size:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Code=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25340</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RO-data=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2272</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RW-data=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">655520</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ZI-data=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">33562800</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Total</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Code </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)                27612 (  </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">26.96kB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Total</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RW</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (RW </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ZI</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)          34218320 (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">33416.33kB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Total</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Code </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RW</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)      32804 (  </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">32.04kB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 编译工程 2 输出信息：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Program</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Size:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Code=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18516</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RO-data=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1056</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RW-data=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ZI-data=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8472</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Total</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Code </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)                19572 (  </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">19.11kB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Total</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RW</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (RW </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ZI</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)              8552 (   </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">8.35kB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Total</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Code </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RW</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)      19652 (  </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">19.19kB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="armlink对rw-data的压缩" tabindex="-1">armlink 对 RW data 的压缩 <a class="header-anchor" href="#armlink对rw-data的压缩" aria-label="Permalink to &quot;armlink对RW data的压缩&quot;">​</a></h2><blockquote><p><a href="https://developer.arm.com/documentation/dui0474/i/using-linker-optimizations/working-with-rw-data-compression" target="_blank" rel="noreferrer">Optimization with RW data compression - ARM Compiler armlink User Guide Version 5.06</a></p></blockquote><p>当压缩后的 RW-data + 解压缩程序大小 &lt; 解压后的 RW-data 大小时，armlink 会对 RW-data 压缩，在上电后解压到 RAM 中，例如上述工程 1 编译输出的大小就不匹配。所以实际镜像大小不完全等于 Code + RO + RW。</p><p>可以使用 <code>--datacompressor off</code> 选项关闭压缩，关闭后编译工程 1 的信息如下：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Program</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Size:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Code=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25276</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RO-data=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2272</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RW-data=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">655520</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ZI-data=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">33562800</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Total</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Code </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)                27548 (  </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">26.90kB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Total</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RW</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (RW </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ZI</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)          34218320 (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">33416.33kB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Total</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Code </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RW</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)     683068 ( </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">667.06kB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>可以发现 ROM 大小是对得上 Code + RO + RW 的，打开压缩可以减小镜像体积，上面打开压缩选项的情况下镜像大小仅为 32.04 kB，不压缩大小为 667.06 kB。这对于体积敏感的应用场景十分重要。</p><p>我们可以输入以下指令查看压缩器：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">➜</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ~</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> armlink</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --datacompressor</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Product:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Keil</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MDK</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Community</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (non-commercial </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">free</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> charge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Arm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Compiler</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Embedded</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6.24</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Tool:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> armlink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [xxxxxx]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">To</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> specific</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compressor</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pass</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> number</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compressor.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Num</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Compression</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> algorithm</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =============================================================================</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Run-length</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> encoding</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Run-length</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> encoding,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> with</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LZ77</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> on</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> small</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repeats</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Complex</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LZ77</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compression</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>这三种压缩器的特点如下：</p><ul><li>压缩器 0 在有大量零字节数据，很少非零字节数据的情况下表现较好</li><li>压缩器 1 在有很多重复的非零数据的情况下表现较好</li><li>压缩器 2 在数据包含很多重复值的情况下表现较好</li></ul><p>当数据中包含很多零字节数据（&gt;75%）时，链接器倾向使用压缩器 0 和 1；当数据包含较少零字节数据（&lt;10%）时，链接器会选择压缩器 2。如果镜像没有明显的特征，链接器会使用所有压缩器压缩一遍，选择压缩体积最小的那个。</p><p>在编译时可以用 <code>--datacompressor x</code> 可以指定上述三种压缩器， <code>x</code> 可以是 <code>0-2</code> 。目前不支持自己添加压缩器。</p><p>armlink 会根据镜像代码自动选择解压器的代码类型。如果镜像只包含 ARM code，解压器会使用 ARM code；如果镜像包含 Thumb code，解压器会使用 Thumb code。</p><h2 id="分散加载文件语法" tabindex="-1">分散加载文件语法 <a class="header-anchor" href="#分散加载文件语法" aria-label="Permalink to &quot;分散加载文件语法&quot;">​</a></h2><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><p>以 STM32H743II 为例，该芯片的 RAM 分为 TCM、AXI、SRAM1-4，这几块内存区域速度不同、访问权限不同，且地址不连续。例如，STM32H743 中仅 MDMA 能访问 TCM 内存，BDMA 仅能访问 SRAM4，还有 Cache, MPU 来掺合一脚，这时候就需要手动管理内存区域，设置不同 DMA 使用不同的内存区域。下表是 STM32H743II 的内存表以及 DMA 访问权限，同时我们添加一个外部 SRAM，我们以此为例来编写一个 sct 文件。</p><table tabindex="0"><thead><tr><th style="text-align:center;">RAM 区域</th><th style="text-align:center;">起始地址</th><th style="text-align:center;">空间大小（偏移量）</th><th style="text-align:center;">MDMA</th><th style="text-align:center;">DMA</th><th style="text-align:center;">BDMA</th></tr></thead><tbody><tr><td style="text-align:center;">DTCM</td><td style="text-align:center;">0x20000000</td><td style="text-align:center;">128 KB (0x20000)</td><td style="text-align:center;">x</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">AXI-SRAM</td><td style="text-align:center;">0x24000000</td><td style="text-align:center;">512 KB (0x80000)</td><td style="text-align:center;">x</td><td style="text-align:center;">x</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">SRAM1</td><td style="text-align:center;">0x30000000</td><td style="text-align:center;">128 KB (0x20000)</td><td style="text-align:center;">x</td><td style="text-align:center;">x</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">SRAM2</td><td style="text-align:center;">0x30020000</td><td style="text-align:center;">128 KB (0x20000)</td><td style="text-align:center;">x</td><td style="text-align:center;">x</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">SRAM3</td><td style="text-align:center;">0x30040000</td><td style="text-align:center;">32 KB (0x8000)</td><td style="text-align:center;">x</td><td style="text-align:center;">x</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">SRAM4</td><td style="text-align:center;">0x38000000</td><td style="text-align:center;">64 KB (0x10000)</td><td style="text-align:center;">x</td><td style="text-align:center;">x</td><td style="text-align:center;">x</td></tr><tr><td style="text-align:center;">SDRAM</td><td style="text-align:center;">0xC0000000</td><td style="text-align:center;">32 MB (0x2000000)</td><td style="text-align:center;">x</td><td style="text-align:center;">x</td><td style="text-align:center;"></td></tr></tbody></table>`,39))])}const b=n(F,[["render",g]]);export{m as __pageData,b as default};
