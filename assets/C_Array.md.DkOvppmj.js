import{_ as e,c as p,j as s,a as l,G as i,a4 as r,B as t,o as c}from"./chunks/framework.D6yW5bo-.js";const f=JSON.parse('{"title":"数组","description":"","frontmatter":{},"headers":[],"relativePath":"C/Array.md","filePath":"C/Array.md","lastUpdated":1734190649000}'),o={name:"C/Array.md"};function d(b,a,h,u,m,k){const n=t("ArticleMetadata");return c(),p("div",null,[a[0]||(a[0]=s("h1",{id:"数组",tabindex:"-1"},[l("数组 "),s("a",{class:"header-anchor",href:"#数组","aria-label":'Permalink to "数组"'},"​")],-1)),i(n),a[1]||(a[1]=r(`<blockquote><p>C 大师 115-126</p><p><a href="https://www.gnu.org/software/gnu-c-manual/gnu-c-manual.html#Arrays" target="_blank" rel="noreferrer">The GNU C Reference Manual | 2.5 Arrays</a></p></blockquote><p>数组，就是同一种类数据的集合。假如现在我需要一个程序来记录全班人的身高，然后求平均值，不可能说我一个人定义一个变量，然后求平均值，就像下面这样：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>float 学生 1 的身高</span></span>
<span class="line"><span>float 学生 2 的身高</span></span>
<span class="line"><span>float 学生 3 的身高</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>float 学生 100 的身高</span></span>
<span class="line"><span></span></span>
<span class="line"><span>float 平均值 = (学生 1 的身高 + 学生 2 的身高 + ... + 学生 100 的身高) / 100</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这显然很蠢，如果要统计 1000 个人，10000 个人，这样写是不可能的。那么我们就可以用一个数组来存储每个学生的身高，如果要添加，只需要增加数组的大小就可以了：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>float 学生身高[学生数量]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>总身高 = 0;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>for (int i = 0; i &lt; 学生数量; ++i) {</span></span>
<span class="line"><span>    总身高 += 学生身高[i];</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>float 平均值 = 总身高 / 学生数量</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>这是不是比第一种方法好多了？数组就是用来解决这个问题的。</p><h2 id="数组的声明与使用" tabindex="-1">数组的声明与使用 <a class="header-anchor" href="#数组的声明与使用" aria-label="Permalink to &quot;数组的声明与使用&quot;">​</a></h2><p>声明一个数组非常简单，我们只需要：</p><div class="language-C vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这就声明了一个长度为 10，类型为 <code>int</code> ，名称为 <code>array</code> 的数组。那么也就是说，我有 10 个 <code>int</code> 类型变量可以使用。</p><p>在标准 C 中，数组长度必须是大于 0 的正数。既然都提到标准 C 了，肯定还有 GNU 的扩展，GNU 允许我们定义长度为 0 的数组，参照：<a href="/C/GNUArray#零长数组">零长数组</a>。</p><p>定义数组长度必须使用常量或者常量表达式，但是 GNU 允许我们使用变量来定义数组长度，参照：<a href="/C/GNUArray#变长数组">变长数组</a>。</p><p>使用数组也非常简单，数组名 [下标] 的形式就可以访问，这里注意数组下标是从 0 开始的，至于为什么是从 0 开始，这与下面所讲的数组的存储有关，这里的下标实质上就是相较于首地址的偏移量。</p><h2 id="数组的存储" tabindex="-1">数组的存储 <a class="header-anchor" href="#数组的存储" aria-label="Permalink to &quot;数组的存储&quot;">​</a></h2><p>从内存上看，定义一个数组，其实就是从内存中划分了一片<strong>连续</strong>的区域给我们使用，注意这里的连续。</p>`,15))])}const v=e(o,[["render",d]]);export{f as __pageData,v as default};
