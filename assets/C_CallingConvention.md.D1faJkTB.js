import{_ as e,c as l,j as i,a as n,G as t,a4 as r,B as h,o as p}from"./chunks/framework.D6yW5bo-.js";const u=JSON.parse('{"title":"函数调用约定","description":"","frontmatter":{},"headers":[],"relativePath":"C/CallingConvention.md","filePath":"C/CallingConvention.md","lastUpdated":1732780036000}'),k={name:"C/CallingConvention.md"};function d(o,a,c,E,g,m){const s=h("ArticleMetadata");return p(),l("div",null,[a[0]||(a[0]=i("h1",{id:"函数调用约定",tabindex:"-1"},[n("函数调用约定 "),i("a",{class:"header-anchor",href:"#函数调用约定","aria-label":'Permalink to "函数调用约定"'},"​")],-1)),t(s),a[1]||(a[1]=r('<blockquote><p><a href="https://www.laruence.com/2008/04/01/116.html" target="_blank" rel="noreferrer">关于调用约定 (cdecl、fastcall、stcall、thiscall) 的一点知识 - 风雪之隅</a></p><p><a href="https://en.wikipedia.org/wiki/Calling_convention" target="_blank" rel="noreferrer">Calling convention - Wikipedia</a></p><p><a href="https://learn.microsoft.com/en-us/cpp/cpp/calling-conventions?view=msvc-170" target="_blank" rel="noreferrer">Calling Conventions | Microsoft Learn</a></p></blockquote><p>函数调用约定是指一个函数调用另一个函数参数传递方式以及返回结果方式的约定。他主要规定：</p><ul><li>参数压栈顺序</li><li>调用前谁来压栈，调用后谁来清栈</li><li>返回值如何返回</li></ul><p>常见的调用约定有:</p><ul><li><code>stdcall</code></li><li><code>cdecl</code></li><li><code>fastcall</code></li><li><code>thiscall</code></li><li><code>nakedcall</code></li></ul><p>下面的内容需要一点 x86 和 ARM 汇编的知识。可参照：<a href="https://hackeyes.github.io/2021/04/22/X86%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/" target="_blank" rel="noreferrer">X86 汇编基础 - Hackeyes | Hackeye</a>, <a href="https://chan-shaw.github.io/2020/03/20/arm%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" target="_blank" rel="noreferrer">arm 汇编语言学习笔记 | 安和桥南丶的博客</a></p><h2 id="如何指定调用约定" tabindex="-1">如何指定调用约定 <a class="header-anchor" href="#如何指定调用约定" aria-label="Permalink to &quot;如何指定调用约定&quot;">​</a></h2><p>在函数名前加 <code>__callName</code> 。例如:</p><div class="language-C vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __stdcall </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> param1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> param2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __cdecl </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> param1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> param2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __thiscall </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> param1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> param2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="stdcall" tabindex="-1"><code>__stdcall</code> <a class="header-anchor" href="#stdcall" aria-label="Permalink to &quot;`__stdcall`&quot;">​</a></h2>',10))])}const F=e(k,[["render",d]]);export{u as __pageData,F as default};
