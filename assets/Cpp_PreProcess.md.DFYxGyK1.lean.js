import{_ as t,c as a,j as r,a as s,G as c,a4 as p,B as n,o as d}from"./chunks/framework.CBloPXIQ.js";const k=JSON.parse('{"title":"预处理指令","description":"","frontmatter":{},"headers":[],"relativePath":"Cpp/PreProcess.md","filePath":"Cpp/PreProcess.md","lastUpdated":1728129090000}'),l={name:"Cpp/PreProcess.md"};function i(m,e,f,P,_,u){const o=n("ArticleMetadata");return d(),a("div",null,[e[0]||(e[0]=r("h1",{id:"预处理指令",tabindex:"-1"},[s("预处理指令 "),r("a",{class:"header-anchor",href:"#预处理指令","aria-label":'Permalink to "预处理指令"'},"​")],-1)),c(o),e[1]||(e[1]=p('<blockquote><p><a href="https://learn.microsoft.com/en-us/cpp/preprocessor/preprocessor?view=msvc-170" target="_blank" rel="noreferrer">Preprocessor | Microsoft Learn</a></p></blockquote><p>预处理，预先处理什么呢？就是预处理指令。感觉我在说废话，其实一句话，<strong>预处理的代码在编译时就是确定好的。</strong> 预处理指令以 <code>#</code> 开头，不以分号结尾。如果一行写不下，可以在行尾加一个 <code>\\</code> 作为续行符，代表下一行仍然是属于这个宏定义的一部分。</p><p>这里所说的预处理指令不是简单的 <code>#include #define</code> 这么简单哦，请坐稳扶好，让你体验一下真正的 C 语言魔法（可能略难，看不懂没关系，隔段时间再来看看）。</p>',3))])}const b=t(l,[["render",i]]);export{k as __pageData,b as default};
